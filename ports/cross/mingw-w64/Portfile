# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           github 1.0

github.setup        mirror mingw-w64 5.0.0 v
set mingw_name      w64-mingw32

platforms           darwin
# TODO: make sure it's distributable
license             ZPL-2.1
maintainers         mojca openmaintainer

description         GCC for Windows 64 & 32 bits
long_description    Mingw-w64 is an advancement of the original mingw.org project, \
                    created to support the GCC compiler on Windows systems.

homepage            http://mingw-w64.sourceforge.net/

checksums           rmd160  31f236afc1ea8013e1c0d0d0727daab35f1bccb8 \
                    sha256  e83ddf0466ff584d36ebd3feffa87c1c332002bcb07e39ef796bb820465a1b28

configure.dir       ${workpath}/build
build.dir           ${configure.dir}
post-extract {      file mkdir "${build.dir}" }

subport i686-${mingw_name}-headers {
    set mingw_arch  i686
    set mingw_dir   headers
}
subport x86_64-${mingw_name}-headers {
    set mingw_arch  x86_64
    set mingw_dir   headers
}
subport i686-${mingw_name}-crt {
    set mingw_arch  i686
    set mingw_dir   crt
}
subport x86_64-${mingw_name}-crt {
    set mingw_arch  x86_64
    set mingw_dir   crt
}

if {${subport} ne ${name}} {
    set mingw_target            ${mingw_arch}-${mingw_name}
    set mingw_prefix            ${prefix}/${mingw_target}
    configure.cmd               ${worksrcpath}/mingw-w64-${mingw_dir}/configure
    configure.args-append       --prefix=${mingw_prefix} \
                                --host=${mingw_target}
    configure.pre_args-delete   --prefix=${prefix}

    # *-headers: check whether we need to add:
    #                           --enable-sdk=none

    # CRT
    if {${mingw_dir} eq "crt"} {
        depends_lib-append      port:${mingw_target}-binutils \
                                port:${mingw_target}-gcc \
                                port:${mingw_target}-headers
        configure.cppflags      "-I${mingw_prefix}/include"

        # ----- from crossgcc (not sure if needed) ----
        # the generated compiler doesn't accept -arch
        configure.cc_archflags
        configure.cxx_archflags
        configure.objc_archflags
        configure.ld_archflags

        # the bootstrap compiler doesn't accept -stdlib
        configure.cxx_stdlib

        # We don't need system includes(this prevents xgcc to include system-wide
        # unwind.h if it is present)!
        compiler.cpath
        # -----

        # is there a more elegant way?
        configure.cc  ${prefix}/bin/${mingw_target}-gcc
        configure.cxx ${prefix}/bin/${mingw_target}-g++
        configure.cpp ${prefix}/bin/${mingw_target}-cpp
        # configure.env-append PATH=...
    }

    destroot.violate_mtree  yes
} else {
    # TODO: make just a placeholder, maybe save the docs; don't install anything
}
